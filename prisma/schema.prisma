// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  // Clerk provided ID
  id String @id @unique
  // Default to a Clerk provided username but can be changed

  // Episodes you are following
  channels Channel[]
  // Programs you are following
  programs Program[]

  /**
   * Options
   */
  // Fetch span in days
  fetchSpan Int      @default(7)
  // How the server renders the feed
  feedSort  FeedSort
}

enum FeedSort {
  NEWEST
  OLDEST
  OLDEST_PER_DAY
}

model Channel {
  id           Int          @id @unique
  name         String
  image        String
  imageHD      String
  color        String
  tagline      String
  liveAudioURL String
  channelType  String
  scheduleURL  String?
  User         User?        @relation(fields: [userId], references: [id])
  userId       String?
  ChannelMeta  ChannelMeta?
  Program      Program[]
  Episode      Episode[]
}

model ChannelMeta {
  id      Int     @id @unique @map("channelId")
  channel Channel @relation(fields: [id], references: [id])

  programs Program[]
  episodes Episode[]
}

model Program {
  id            Int     @id @unique
  name          String
  description   String
  imageSquare   String
  imageSquareHD String
  imageWide     String
  imageWideHD   String
  broadcastinfo String?
  payoff        String?

  channelId         Int
  channel           Channel          @relation(fields: [channelId], references: [id])
  programCategoryId Int?
  programCategory   ProgramCategory? @relation(fields: [programCategoryId], references: [id])
  User              User?            @relation(fields: [userId], references: [id])
  userId            String?
  ChannelMeta       ChannelMeta?     @relation(fields: [channelMetaId], references: [id])
  channelMetaId     Int?
  ProgramMeta       ProgramMeta?
  Episode           Episode[]
  PodFile           PodFile[]
}

model ProgramMeta {
  id      Int     @id @unique @map("programId")
  program Program @relation(fields: [id], references: [id])

  episodes     Episode[]
  lastFetchUTC DateTime
}

model ProgramCategory {
  id       Int       @id @unique
  name     String    @unique
  programs Program[]
}

model Episode {
  id             Int      @id @unique
  title          String
  description    String
  publishDateUTC DateTime
  image          String
  imageHD        String
  podFile        PodFile  @relation(fields: [podFileId], references: [id])

  programId     Int
  program       Program      @relation(fields: [programId], references: [id])
  channelId     Int?
  channel       Channel?     @relation(fields: [channelId], references: [id])
  ChannelMeta   ChannelMeta? @relation(fields: [channelMetaId], references: [id])
  channelMetaId Int?
  ProgramMeta   ProgramMeta? @relation(fields: [programMetaId], references: [id])
  programMetaId Int?
  podFileId     Int
}

model PodFile {
  id              Int       @id @unique
  title           String
  description     String
  duration        Int
  fileSizeInBytes Int
  publishDateUTC  DateTime
  url             String
  programId       Int
  program         Program   @relation(fields: [programId], references: [id])
  Episode         Episode[]
}

model ServerMeta {
  id String @id @unique @default(uuid())

  lastChannelIndexFetchUTC DateTime
  lastProgramIndexFetchUTC DateTime
}
