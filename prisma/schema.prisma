// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  // Clerk provided ID
  id String @id @unique
  // Default to a Clerk provided username but can be changed

  // Episodes you are following
  channels Channel[]
  // Programs you are following
  programs Program[]

  // Per episode progress
  progress EpisodeProgress[]

  /**
   * Options
   */
  // Fetch span in days
  fetchSpan Int      @default(7)
  // How the server renders the feed
  feedSort  FeedSort @default(OLDEST_PER_DAY)
}

model EpisodeProgress {
  progress Int
  duration Int

  episodeId Int     @map("episode_id")
  episode   Episode @relation(fields: [episodeId], references: [id])
  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id])

  @@id([userId, episodeId])
}

enum FeedSort {
  NEWEST
  OLDEST
  OLDEST_PER_DAY
}

model Channel {
  id           Int       @id @unique
  name         String
  image        String
  imageHD      String
  color        String
  tagline      String
  liveAudioURL String
  channelType  String
  scheduleURL  String?
  users        User[]
  programs     Program[]
  episodes     Episode[]
}

model Program {
  id            Int       @id @unique
  name          String
  description   String
  imageSquare   String
  imageSquareHD String
  imageWide     String
  imageWideHD   String
  broadcastInfo String?
  payoff        String?
  Users         User[]
  episodes      Episode[]

  channelId         Int?
  channel           Channel?         @relation(fields: [channelId], references: [id])
  programCategoryId Int?
  programCategory   ProgramCategory? @relation(fields: [programCategoryId], references: [id])

  lastFetchUTC DateTime
}

model ProgramCategory {
  id       Int       @id @unique
  name     String    @unique
  programs Program[]
}

model Episode {
  id             Int      @id @unique
  title          String
  description    String
  publishDateUTC DateTime
  imageSquare    String
  imageWideHD    String
  podFile        PodFile  @relation(fields: [id], references: [id])

  programId Int
  program   Program  @relation(fields: [programId], references: [id])
  channelId Int?
  channel   Channel? @relation(fields: [channelId], references: [id])

  EpisodeProgress EpisodeProgress[]
}

model PodFile {
  // Every episode has one podfile
  id              Int      @id @unique @map("podfile_id")
  title           String
  description     String
  duration        Int
  fileSizeInBytes Int
  publishDateUTC  DateTime
  url             String
  programId       Int
  Episode         Episode?
}

model ServerMeta {
  id String @id @unique @default(uuid())

  lastChannelIndexFetchUTC DateTime
  lastProgramIndexFetchUTC DateTime
}
